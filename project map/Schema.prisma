// prisma is not yet setup 

model User {
  id        String   @id @default(cuid()) // collision resistant unique identifier
  email     String   @unique
  userName  String   @unique
  clerkId   String   @unique
  name      String?
  bio       String?
  image     String?
  location  String?
  website   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //Relations 

  posts    Post[] // one user can have many posts
  comments Comment[] // one user can have many comments
  likes    Like[] // one user can like many posts

  followers Follows[] @relation("following") // users that follow this user
  following Follows[] @relation("follower") // users this user follows

  notifications        Notification[] @relation("userNotifications") // notifications received by user
  notificationsCreated Notification[] @relation("notificationCreator") // notifications created by user
  Follows              Follows[]
}

model Post {
  id        String   @id @default(cuid())
  authorId  String
  content   String?
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  author        User           @relation(fields: [authorId], references: [id], onDelete: Cascade) // cascade : as if the user is deleted, the all post of the user is also deleted
  comments      Comment[]
  likes         Like[]
  notifications Notification[]
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  authorId  String
  postId    String
  createdAt DateTime @default(now())

  // Relations
  author       User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post         Post           @relation(fields: [postId], references: [id], onDelete: Cascade)
  Notification Notification[]

  // Indexes : speed up queries 
  @@index([authorId, postId]) // composite index for authorId and postId for faster lookups
}

model Like {
  id        String   @id @default(cuid())
  postId    String
  userId    String
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId]) // this prevents same user liking post twice
  @@index([userId, postId]) // composite index for faster queries
}

model Follows {
  followerId  String
  followingId String
  createdAt   DateTime @default(now())

  //Relations
  follower  User    @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  following User    @relation("following", fields: [followingId], references: [id], onDelete: Cascade)
  User      User?   @relation(fields: [userId], references: [id])
  userId    String?

  @@id([followerId, followingId]) // composite primary key prevents duplicate follows
  @@index([followerId, followingId]) // composite index for faster queries
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  creatorId String
  type      NotificationType
  read      Boolean          @default(false)
  postId    String?
  commentId String?
  createdAt DateTime         @default(now())

  // Relations
  user    User     @relation("userNotifications", fields: [userId], references: [id], onDelete: Cascade)
  creator User     @relation("notificationCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  post    Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}

enum NotificationType {
  LIKE
  COMMENT
  FOLLOW
}
